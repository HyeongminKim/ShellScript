#!/bin/bash

exitCode=0
prevDir=$(pwd)

function gitUpdate() {
    repoName=("Release/ShellScript" "Release/PasswordsGenerator")
    if [ "$(uname -s)" == "Darwin" ]; then
        repoName+=("Release/aptall")
    elif [ "$(uname -s)" == "Linux" ]; then
        repoName+=("Release/brewall" "Release/ArtDisplay")
    fi

    for target in "${repoName[@]}"; do
        if [ -d ~/Documents/$target ]; then
            echo -e "\n\033[37mupdater: Updating repo ~/Documents/$target...\033[m"
            cd ~/Documents/$target
            git pull --rebase --stat origin $(git branch | sed '/* /!d' | sed 's/* //g')
            cd - &>/dev/null
            if [ $? != 0 ]; then
                echo -e "\033[31mupdater: exception occurred: return original directory function corrupted: $prevDir currently not accessible. \033[m"
                cd ~
                echo "updater: autofix: Fix broken original directory to $HOME."
            fi
        fi
    done
}

if [ "$SKIP_PACKAGE_UPDATER" == "true" ]; then
    gitUpdate
    if [ "$(uname -s)" == "Darwin" ]; then
        if [ -x ~/Documents/Release/Shellscript/Operating\ System/macOS/Private/extension ]; then
            ~/Documents/Release/Shellscript/Operating\ System/macOS/Private/extension
        fi
    elif [ "$(uname -s)" == "Linux" ]; then
        if [ -x ~/Documents/Release/Shellscript/Operating\ System/Linux/General/extension ]; then
            ~/Documents/Release/Shellscript/Operating\ System/Linux/General/extension
        elif [ -x ~/Documents/Release/Shellscript/Operating\ System/Linux/RaspberryPi/extension ]; then
            ~/Documents/Release/Shellscript/Operating\ System/Linux/RaspberryPi/extension
        fi
    fi
    echo -e '\a'
    exit $exitCode
fi

if [ "$(uname -s)" == "Darwin" ]; then
    if [ -x ~/Documents/Release/brewall/brewall.sh ]; then
        ~/Documents/Release/brewall/brewall.sh $@
        if [ $# == 0 ]; then
            gitUpdate
        fi
        exitCode=$?
    else
        gitUpdate
    fi
elif [ "$(uname -s)" == "Linux" ]; then
    if [ -x ~/Documents/Release/aptall/aptall.sh ]; then
        ~/Documents/Release/aptall/aptall.sh $@
        if [ $? -ne 127 -a $# == 0 ]; then
            gitUpdate
        fi
        exitCode=$?
    else
        gitUpdate
    fi
else
    echo "Unknown OS: $(uname -s). Aborting."
    exitCode=1
fi

echo -e '\a'
exit $exitCode
