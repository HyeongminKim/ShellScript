#!/bin/bash

shouldProjectClean=0

function gracefully_exit() {
    rm "$UEPath/.UnrealEditor.lock~" 2> /dev/null
    exit 1
}

function check_editor_running() {
    ps -e | grep UnrealEditor | grep -v grep &> /dev/null
    if [ $? -eq 0 ]; then
        echo -n 'Are you sure terminate UnrealEditor process? (y/N) > '
        read n
        if [ "$n" == "y" -o "$n" == "Y" ]; then
            killall UnrealEditor
        else
            echo 'User abort' >&2
            exit 1
        fi
    fi
}

function check_unrealengine_dir() {
    if [ x"$UEPath" == x ]; then
        echo "unable to locate UnrealEditor. please set UEPath with absolute path." >&2
        exit 1
    elif [ ! -x "$UEPath/Setup.sh" ]; then
        echo "UnrealEngine directory structure does not seem here." >&2
        echo "UEPath: $UEPath"
        exit 1
    fi

    cd "$UEPath"
    if [ $? -ne 0 ]; then
        exit 1
    fi
}

if [ x"$1" == x ]; then
    echo "usage: $0 [option] <[build-options [build-options1.2..]] [build-preset]>" >&2
    exit 1
elif [ "$1" == "help" -o "$1" == "--help" ]; then
    echo "usage: $0 [option] <[build-options [build-options1.2..]] [build-preset]>"
    echo ""
    echo "OPTIONS"
    echo -e "   help\tShow this manual"
    echo -e "  clean\tDelete caches and object files (UnrealEditor only)"
    echo -e "channel\tShow current or change channel to use different UnrealEditor version."
    echo -e "\tchannel [branch]"
    echo ""
    echo "SUPPORTED BUILD OPTIONS"
    echo "  CrashReportClient"
    echo "  ShaderCompileWorker"
    echo "  UnrealLightmass"
    echo "  InterchangeWorker"
    echo "  UnrealPak"
    echo "  UnrealEditor"
    echo ""
    echo "PRESET"
    echo "  StandardSet"
    echo "  AlternativeSet"
    echo "  DebugSet"
    echo ""
    echo "SEE ALSO"
    echo "https://github.com/EpicGames/UnrealEngine/blob/release/Engine/Build/BatchFiles/Linux/README.md"
    echo ""
    echo "EXAMPLE"
    echo -e "$0 AlternativeSet\nBuild using with AlternativeSet preset\n"
    echo -e "$0 CrashReportClient ShaderCompileWorker UnrealLightmass UnrealEditor UnrealPak\nBuild with provided options\n"
    echo -e "$0 --clean StandardSet\nClean UnrealEditor build files and build StandardSet preset"
    exit 0
elif [ "$1" == "clean" -o "$1" == "--clean" ]; then
    shouldProjectClean=1
elif [ "$1" == "channel" -o "$1" == "--channel" ]; then
    check_unrealengine_dir

    if [ x"$2" == x ]; then
        git --no-pager branch -r | sed "s/origin\///g" | grep -v "dev" | grep -v "stag" | grep -v "test" | grep -v "HEAD"
        echo "current branch: $(git branch --show-current)"
        echo -n "new branch name: "
        read n
    else
        n="$2"
    fi

    if [ x"$n" == x ]; then
        echo "User abort." >&2
        exit 1
    elif [ "$(git branch --show-current)" == "$n" ]; then
        echo "current branch and provided branch are identical" >&2
        exit 1
    fi

    git --no-pager branch -r | sed "s/origin\///g" | grep "$n" &> /dev/null
    if [ $? -ne 0 ]; then
        echo "unknown branch name $n. Aborted" >&2
        exit 1
    fi

    git remote update
    check_editor_running

    git diff HEAD...origin/$n
    echo -e "\e[33mWarning\e[m: If you want to change UnrealEditor branch, you should rebuild UnrealEditor changes effect. This action can not be undo."
    echo -n "Are you sure continue this action? (y/N) > "
    read cn
    if [ "$cn" == "y" -o "$cn" == "Y" ]; then
        echo 0 > "$UEPath/.UnrealEditor.lock~"
    else
        echo "User abort."
        exit 1
    fi

    git restore .
    git --no-pager branch | grep "$n" &> /dev/null
    if [ $? -ne 0 ]; then
        git checkout -t origin/$n
    else
        git checkout $n
    fi
    if [ $? -ne 0 ]; then
        echo "unable to change branch $n."
        rm "$UEPath/.UnrealEditor.lock~"
        exit 1
    else
        echo "successfully to change branch $n. Please re-run this script to build UnrealEditor."
        exit 0
    fi
fi

if [ -r "$UEPath/.UnrealEditor.lock~" ]; then
    lockedPID=$(cat "$UEPath/.UnrealEditor.lock~")
    if [ $lockedPID -ne 0 ]; then
        echo "unable to build UnrealEditor. target file was locked by another process($lockedPID)."
        exit 1
    fi
fi

echo "Checking dependency..."
git --version
clang --version
cmake --version

check_unrealengine_dir

if [ ! -r "$UEPath/.DS_Store" ]; then
    echo "0" > "$UEPath/.DS_Store"
fi

seconds=$(cat "$UEPath/.DS_Store")
previous_elapsed_time=$seconds

hours=$(expr $seconds / 3600)
seconds=$(expr $seconds % 3600)
minutes=$(expr $seconds / 60)
seconds=$(expr $seconds % 60)

echo "Current system infomations..."
if [ -r /etc/os-release ]; then
    uname -m | grep "aarch64" &> /dev/null
    if [ $? -eq 0 ]; then
        echo "This script does not support $(uname -m)." >&2
        exit 1
    else
        echo "supported distro detected: $(cat /etc/os-release | grep 'ID_LIKE' | sed 's/\"//g' | sed 's/ID_LIKE=//')"
    fi
else
    echo "$(uname) does not support yet. reason: \`/etc/os-release\` file does not exist." >&2
    exit 1
fi

df -h | grep -v tmpfs

if [ -r "$UEPath/Engine/Binaries/Linux/UnrealEditor.version" ]; then
    echo "Current UnrealEditor information..."
    cat "$UEPath/Engine/Binaries/Linux/UnrealEditor.version" | sed 's/\t/    /' | grep -v "BranchName"
    echo ''
fi

echo "Check for updates in repo: $UEPath..."
last_revision=$(git --no-pager log --author UnrealBot --grep release --format='[%h] %B' $(git rev-parse --short HEAD) -n 1)
cntBranch=$(git branch --show-current)

check_editor_running

git fetch origin $cntBranch --verbose &> "$UEPath/.UnrealEditor.tmp"
cat "$UEPath/.UnrealEditor.tmp"
echo -e "--- REVISION HISTORIES in 모⎇ $cntBranch ---\n$(git --no-pager log --author UnrealBot --grep release --format='[%h] %B%N%-C() at %ar%N%-C()' -n 5)"
cat "$UEPath/.UnrealEditor.tmp" | grep '=' &> /dev/null
if [ $? -ne 0 ]; then
    echo -e '\e[0;1mREPO STATUS\e[m: revision update available! See above'
else
    echo -e '\e[0;1mREPO STATUS\e[m: Up to date'
fi
echo ''
rm "$UEPath/.UnrealEditor.tmp"

if [ -n "$(git status --porcelain | grep -v '^??')" ]; then
    git status --porcelain | grep -v '^??'
    conflict=$(git status --porcelain | grep -v '^??' | awk '{ print $2 }')
    echo -e "\e[33mWarning! Possible conflict\e[m: You have uncommitted changes. please stage or commit them."
    echo -n "Would you like revert conflict files? (y/N) > "
    read n
    if [ "$n" == "y" -o "$n" == "Y" ]; then
        git restore $conflict
        if [ $? -ne 0 -o $(git status --porcelain | grep -v '^??' | wc -l) -ne 0 ]; then
            conflict=$(git status --porcelain | grep -v '^??' | awk '{ print $2 }')
            if [ $(git status --porcelain | grep -v '^??' | wc -l) -eq 1 ]; then
                echo -e "\n=== unable to revert file ===\n$conflict\n"
            else
                echo -e "\n=== unable to revert files ===\n$conflict\n"
            fi
            echo 'If you want revert changes: `git restore <path>`'
        fi
    else
        echo 'If you want revert changes: `git restore <path>`'
    fi
fi

if [ $shouldProjectClean -eq 1 ]; then
    if [ $previous_elapsed_time -eq 0 ]; then
        echo "Would you like to clean and rebuild $2? This action will take several hours"
    else
        echo "Would you like to clean and rebuild $2? This action will take $hours:$minutes:$seconds."
    fi
    echo -n "this action can not be undo (y/N) > "
else
    if [ $previous_elapsed_time -eq 0 ]; then
        echo "Would you like to build $1? This action will take several hours"
    else
        echo "Would you like to build $1? This action will take $hours:$minutes:$seconds."
    fi
    echo -n "this action can not be undo (y/N) > "
fi
read n
if [ "$n" == "y" -o "$n" == "Y" ]; then
    echo $$ > "$UEPath/.UnrealEditor.lock~"
else
    echo "User abort." >&2
    exit 1
fi

echo "Updating repository..."
startTime=$(date +%s)

git pull origin $cntBranch
if [ $? -ne 0 ]; then
    echo "unable to update UnrealEngine repository. try again later." >&2
    gracefully_exit
fi
git gc --prune=now
if [ $? -ne 0 ]; then
    echo "unable to clean-up UnrealEngine repository. try again later." >&2
    gracefully_exit
fi
git count-objects -vH | awk '/size/'

echo "Generating project files..."

/bin/bash "$UEPath/Setup.sh"
if [ $? -ne 0 ]; then
    gracefully_exit
fi

/bin/bash "$UEPath/GenerateProjectFiles.sh"
if [ $? -ne 0 ]; then
    gracefully_exit
fi

if [ $shouldProjectClean -eq 1 ]; then
    echo "Invalidating UnrealEditor build caches and object files... Please wait."
    make UnrealEditor ARGS="-clean" || gracefully_exit
fi

if [ $shouldProjectClean -eq 0 ]; then
    if [ "$1" == "StandardSet" ]; then
        echo "Building StandardSet. See manual."
        make || gracefully_exit
    elif [ "$1" == "AlternativeSet" ]; then
        echo "Building AlternativeSet. See manual."
        make CrashReportClient ShaderCompileWorker UnrealLightmass InterchangeWorker UnrealPak UnrealEditor || gracefully_exit
    elif [ "$1" == "DebugSet" ]; then
        echo "Building DebugSet. See manual."
        make UnrealEditor-Linux-Debug || gracefully_exit
    else
        echo "Building $@. Please wait."
        make $@ || gracefully_exit
    fi
else
    if [ "$2" == "StandardSet" ]; then
        echo "Building StandardSet. See manual."
        make || gracefully_exit
    elif [ "$2" == "AlternativeSet" ]; then
        echo "Building AlternativeSet. See manual."
        make CrashReportClient ShaderCompileWorker UnrealLightmass InterchangeWorker UnrealPak UnrealEditor || gracefully_exit
    elif [ "$2" == "DebugSet" ]; then
        echo "Building DebugSet. See manual."
        make UnrealEditor-Linux-Debug || gracefully_exit
    else
        echo "Building ${@:2}. Please wait."
        make ${@:2} || gracefully_exit
    fi
fi
endTime=$(date +%s)

seconds=$(expr $endTime - $startTime)
echo $seconds > "$UEPath/.DS_Store"

hours=$(expr $seconds / 3600)
seconds=$(expr $seconds % 3600)
minutes=$(expr $seconds / 60)
seconds=$(expr $seconds % 60)

rm "$UEPath/.UnrealEditor.lock~"
if [ $shouldProjectClean -eq 0 ]; then
    echo "Built process $1 elapsed $hours:$minutes:$seconds."
else
    echo "Built process $2 elapsed $hours:$minutes:$seconds."
fi
