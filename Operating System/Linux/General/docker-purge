#!/bin/bash

container=
image=

function permission_check() {
    id | grep docker &> /dev/null
    if [ $? -ne 0 ]; then
        echo "error: $USER does not enough permission accesing docker daemon. Are you root?" >&2
        echo -n "Do you want to make changes docker with $USER account? (y/N) > "
        read n
        if [ "$n" == "y" -o "$n" == "Y"]; then
            sudo usermod -aG docker $USER
            if [ $? -ne 0 ]; then
                echo "error: unable to write /etc/group." >&2
            else
                echo "relogin $USER account to changes effect."
            fi
        fi
        exit 1
    fi
}

if [ $# -eq 2 ]; then
    container=$1
    image=$2
elif [ "$1" == "help" -o "$1" == "--help" ]; then
    echo "usage: $0 [option | container image]"
    echo -e "--help\tShow this help and exit."
    exit 0
else
    permission_check
    docker ps -a

    echo -n "container ID: "
    read n
    container="$n"

    docker images
    echo -n "image ID: "
    read n
    image="$n"
    if [ x"$image" == x -a x"$container" == x ]; then
        echo "User Abort." >&2
        exit 1
    fi
    echo ""
fi

if ! [ x"$container" == x ]; then
    docker container inspect $container &> /dev/null
    if [ $? -ne 0 ]; then
        echo "error: no such container: $container" >&2
        exit 1
    else
        docker container logs $container
    fi
fi

if ! [ x"$image" == x ]; then
    docker image inspect $image &> /dev/null
    if [ $? -ne 0 ]; then
        echo "error: no such image: $image" >&2
        exit 1
    else
        docker image history $image
    fi
fi

permission_check
if ! [ x"$container" == x ]; then
    docker top $container &>/dev/null
    if [ $? -eq 0 ]; then
        docker stop $container
    fi
    docker rm $container
fi

if ! [ x"$image" == x ]; then
    docker rmi $image
fi
