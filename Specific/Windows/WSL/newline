#!/bin/bash

if [ $# -eq 0 -a -t 0 ]; then
    echo "Usage: newline [options] [<files>]" >&2
    exit 2
elif [ "$1" == "-i" -o "$1" == "--info" ]; then
    newline=0
    if [ -t 0 ]; then
        params=("${@}")
    else
        params=("${@}" $(cat /dev/stdin))
    fi
    for i in "${!params[@]}"; do
        if [[ "${params[$i]}" != "-"* ]]; then
            if [ -d "${params[$i]}" ]; then
                change_params=$(echo "${params[$i]}" | sed 's/\/$//')
                echo "Please change ${params[$i]} to $change_params/*" >&2
                echo "or use this command: \`find $change_params -type f | newline --info\`" >&2
                continue
            elif [ -f "${params[$i]}" ]; then
                if [ $newline -gt 0 ]; then
                    echo ""
                fi
                binary_check=$(file -bL --mime "${params[$i]}" | grep "binary")
                if [ $? -eq 0 ]; then
                    echo "skipping ${params[$i]} file. reason: binary file." >&2
                    logger --tag newline --priority user.warn "skipping ${params[$i]} file due to binary type"
                    continue
                fi
                file "${params[$i]}" 2> /dev/null
                which xxd &> /dev/null
                if [ $? -eq 0 ]; then
                    xxd -l 32 "${params[$i]}"
                else
                    logger --tag newline --priority user.notice "xxd command not found. please install vim"
                    echo "Please install vim to use xxd command." >&2
                fi
                newline=$(expr $newline + 1)
                logger --tag newline --priority user.info "viewing ${params[$i]} file"
            else
                echo "unable to locate ${params[$i]} file. no such file or directory" >&2
            fi
        fi
    done
    exit 0
elif [ "$1" == "-h" -o "$1" == "--help" ]; then
    echo 'Determine type of files or converting EOL between LF and CRLF.'
    echo -e '\nUsage: newline [options] [<files>]'
    echo -e '\nOptions: '
    echo -e ' -h, --help\t\tdisplay this help and exit'
    echo -e ' -i, --info FILEs\tdisplay provide file type and properties'
    echo -e '     --type=EOL\t\tlimiting `EOL` type when using converter'
    echo -e '\t\t\t`EOL` only accepted `CRLF` and `LF` (NAK `\\r\\n` or `\\n`)'
    echo -e ' FILEs\t\t\tconverting files EOL in provided params'
    echo -e '\nEXIT STATUS'
    echo -e ' 0\t operation Successful'
    echo -e ' 1\t operation Failed'
    echo -e ' 2\t unknown command or parameter type'
    echo -e '\nEXAMPLES'
    echo 'Print example.txt file EOL type and properties'
    echo '% newline -i example.txt'
    echo ''
    echo 'Convert example.txt file other support EOL type'
    echo '% newline example.txt'
    echo ''
    echo 'Convert example.txt file EOL type to CRLF'
    echo '% newline --type=CRLF example.txt'
    echo ''
    echo "Convert files EOL type to LF recursively from specified directory"
    echo "% find /path/to/directory -type f | newline --type=LF"
    echo "% find /path/to/directory -type f -exec newline --type=LF {} \\;"
    exit 0
fi

constantEOF=""
if [ -t 0 ]; then
    params=("${@}")
else
    params=("${@}" $(cat /dev/stdin))
fi

for i in "${!params[@]}"; do
    if [[ "${params[$i]}" == "-"* ]]; then
        if [ "${params[$i]}" == "--type=LF" -o "${params[$i]}" == "--type=lf" ]; then
            constantEOF="LF"
            logger --tag newline --priority user.debug "locking EOF type to LF"
        elif [ "${params[$i]}" == "--type=CRLF" -o "${params[$i]}" == "--type=crlf" ]; then
            constantEOF="CRLF"
            logger --tag newline --priority user.debug "locking EOF type to CRLF"
        else
            logger --tag newline --priority user.warn "unknown EOF type: ${params[$i]}. skipping."
        fi
        continue
    fi

    if [ -d "${params[$i]}" ]; then
        change_params=$(echo "${params[$i]}" | sed 's/\/$//')
        echo "Please change ${params[$i]} to $change_params/*" >&2
        if [ x$constantEOF == x ]; then
            echo "or use this command: \`find $change_params -type f | newline\`" >&2
        else
            echo "or use this command: \`find $change_params -type f | newline --type=$constantEOF\`" >&2
        fi
        continue
    elif ! [ -r "${params[$i]}" ]; then
        echo "unable to locate ${params[$i]} file. no such file or directory" >&2
        continue
    elif ! [ -w "${params[$i]}" ]; then
        echo "unable to access ${params[$i]} file. permission denied." >&2
        continue
    fi

    binary_check=$(file -bL --mime "${params[$i]}" | grep "binary")
    if [ $? -eq 0 ]; then
        logger --tag newline --priority user.warn "skipping ${params[$i]} file due to binary type"
        echo "skipping ${params[$i]} file. reason: binary file." >&2
        continue
    fi

    file -b "${params[$i]}" 2> /dev/null | grep "text" 2> /dev/null | grep "CRLF" &> /dev/null
    if [ $? == 0 ]; then
        if [ "$constantEOF" == "CRLF" ]; then
            logger --tag newline --priority user.debug "skipping ${params[$i]} file due to requirement already satisfied: CRLF"
            echo "skipping ${params[$i]} file. reason: requirement already satisfied.">&2
            continue
        fi
        sed -i 's/\r$//' "${params[$i]}" &> /dev/null
        if [ $? == 0 ]; then
            logger --tag newline --priority user.info "successfully converted ${params[$i]} file CRLF to LF"
            echo "${params[$i]}: operation complete. EOL was converted CRLF to LF."
        else
            logger --tag newline --priority user.warn "unable to convert ${params[$i]} file"
            echo "unable to convert ${params[$i]} file. reason: access denied.">&2
        fi
        continue
    fi

    file -b "${params[$i]}" 2> /dev/null | grep "text" 2> /dev/null | grep "CR" &> /dev/null
    if [ $? == 0 ]; then
        logger --tag newline --priority user.err "unable to convert ${params[$i]} file with CR type"
        echo "unable to convert ${params[$i]} file. reason: unsupported EOL CR(Macintosh) type.">&2
        continue
    fi

    file -b "${params[$i]}" 2> /dev/null | grep "text" &> /dev/null
    if [ $? == 0 ]; then
        if [ "$constantEOF" == "LF" ]; then
            logger --tag newline --priority user.debug "skipping ${params[$i]} file due to requirement already satisfied: LF"
            echo "skipping ${params[$i]} file. reason: requirement already satisfied.">&2
            continue
        fi
        sed -i 's/$/\r/' "${params[$i]}" &> /dev/null
        if [ $? == 0 ]; then
            logger --tag newline --priority user.info "successfully converted ${params[$i]} file LF to CRLF"
            echo "${params[$i]}: operation complete. EOL was converted LF to CRLF."
        else
            logger --tag newline --priority user.warn "unable to convert ${params[$i]} file"
            echo "unable to convert ${params[$i]} file. reason: access denied.">&2
        fi
        continue
    fi
done

