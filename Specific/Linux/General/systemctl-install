#!/bin/bash

target_path=
target_name=
inst_location=
launch_date=$(date '+%Y-%m-%d_%H%M%S')
window_type=

if [ "$1" == "-h" -o "$1" == "--help" ]; then
    echo "USAGE: $0 <systemd_unit_type|option> <source|name> [destination]"
    echo ""
    echo "OPTION"
    echo -e " -h, --help:\tprint this message"
    echo ""
    echo "SUPPORTED TARGET"
    echo "- service"
    echo "- target"
    echo "- device"
    echo "- mount"
    echo "- automount"
    echo "- path"
    echo "- socket"
    echo "- timer"
    echo ""
    echo -e "DESTINATION\t\t\t\t\tPRI\tDEFAULT"
    echo -e " 0, etc:\t/etc/systemd/system\t\t  5\t   *"
    echo -e " 1, run:\t/run/systemd/system\t\t  0"
    echo -e " 2, usr:\t/usr/lib/systemd/system\t\t-10"
    echo -e " PATH\t\tcustom locations...\t\t 10"
    exit 0
elif [ $# -lt 2 -o $# -gt 3 ]; then
    if [ $# -eq 0 ]; then
        echo "This script does not configured default parameter type. please see \`--help\`" >&2
    else
        echo "unknown parameter type: $@. please see \`--help\`" >&2
    fi
    exit 1
fi

case "$1" in
    "service"|"target"|"device"|"mount"|"automount"|"path"|"socket"|"timer")
        echo "" &> /dev/null
        ;;
    *)
        echo "error: unable to convert $(basename "$2").$1 to systemd unit type. please see \`--help\`" >&2
        exit 1
        ;;
esac

if [ -r "$2" ]; then
    target_path=$(realpath "$2")
    target_name=$(basename "$2")
else
    target_name="$2"
fi

if [ $# -eq 2 ]; then
    echo "This script will create $target_name.$1 to /etc/systemd/system"
    if ! [ x"$target_path" == x ]; then
        file "$target_path" 2> /dev/null
        xxd -l 64 "$target_path"
    fi

    if [ -r /etc/systemd/system/$target_name.$1 ]; then
        echo "systemd-inst: error: $target_name.$1 already exist in /etc/systemd/system" >&2
        exit 1
    fi
elif [ $# -eq 3 ]; then
    case "$3" in
        "0"|"etc")
            inst_location=/etc/systemd/system
        ;;
        "1"|"run")
            inst_location=/run/systemd/system
        ;;
        "2"|"usr")
            inst_location=/usr/lib/systemd/system
        ;;
        *)
            if ! [ -r "$3" ]; then
                echo "systemd-inst: cannot access '$3': no such file or directory." >&2
                exit 1
            fi

            inst_location=$(realpath "$3")
        ;;
    esac
    echo "This script will create $target_name.$1 to $inst_location"
    if ! [ x"$target_path" == x ]; then
        file "$target_path" 2> /dev/null
        xxd -l 64 "$target_path"
    fi

    if [ -r /etc/systemd/system/$target_name.$1 ]; then
        echo "systemd-inst: error: $target_name.$1 already exist in /etc/systemd/system" >&2
        exit 1
    fi
fi

echo -n "Are you wish to continue install $1? (y/N) > "
read n
if ! [ "$n" == "Y" -o "$n" == "y" ]; then
    echo "Abort."
    exit 1
fi

which getenforce &> /dev/null
if [ $? -eq 0 ]; then
    getenforce | grep Enforcing &> /dev/null
    if [ $? -eq 0 ]; then
        echo "Changing SELinux to Permissive mode"
        sudo setenforce 0
        if [ $? -ne 0 ]; then
            echo "systemd-inst: error: could not install $target_name.$1 due to SELinux policy. Aborted." >&2
            exit 1
        fi
        sestatus
    fi
fi

echo -n "Please type description: "
read desc

case $1 in
    "service"|"target"|"mount"|"path"|"automount")
        echo -n "This $target_name.$1 requires GUI (y/N) > "
        read n
        if [ "$n" == "y" -o "$n" == "Y" ]; then
            window_type="graphical.target"
        else
            window_type="multi-user.target"
        fi
    ;;
esac

echo "# Generated by systemd-inst., Copyright (c) 2024 Hyeongmin Kim." > /tmp/systemd-inst-$launch_date
echo "# For more infomation $1 syntax, follow this url: https://www.freedesktop.org/software/systemd/man/devel/systemd.$1.html" >> /tmp/systemd-inst-$launch_date
echo "" >> /tmp/systemd-inst-$launch_date
echo "[Unit]" >> /tmp/systemd-inst-$launch_date
echo "Description=$desc" >> /tmp/systemd-inst-$launch_date
echo "# Uncomment lines below if your program should access internet" >> /tmp/systemd-inst-$launch_date
echo "# Requires=network-online.target" >> /tmp/systemd-inst-$launch_date
echo "# After=network.target" >> /tmp/systemd-inst-$launch_date
echo "" >> /tmp/systemd-inst-$launch_date

case $1 in
    "service")
        echo "[Service]" >> /tmp/systemd-inst-$launch_date
        echo "Type=simple" >> /tmp/systemd-inst-$launch_date
        echo "# User=$USER" >> /tmp/systemd-inst-$launch_date
        echo "# Group=$USER" >> /tmp/systemd-inst-$launch_date
        echo '# Environment="DISPLAY=:0"' >> /tmp/systemd-inst-$launch_date
        echo "# EnvironmentFile=$(dirname $2)" >> /tmp/systemd-inst-$launch_date
        if ! [ x"$target_path" == x ]; then
            echo "ExecStart=$target_path" >> /tmp/systemd-inst-$launch_date
            echo "# ExecReload=$target_path --reload" >> /tmp/systemd-inst-$launch_date
            echo "# ExecStop=$target_path --stop" >> /tmp/systemd-inst-$launch_date
        else
            echo "ExecStart=$target_name" >> /tmp/systemd-inst-$launch_date
            echo "# ExecReload=$target_name --reload" >> /tmp/systemd-inst-$launch_date
            echo "# ExecStop=$target_name --stop" >> /tmp/systemd-inst-$launch_date
        fi
    ;;
    "socket")
        echo "[Socket]" >> /tmp/systemd-inst-$launch_date
        echo "# ListenStream=8080" >> /tmp/systemd-inst-$launch_date
    ;;
    "device")
        echo "[Device]" >> /tmp/systemd-inst-$launch_date
    ;;
    "automount")
        echo "[Automount]" >> /tmp/systemd-inst-$launch_date
        echo "# Where=/mnt/path" >> /tmp/systemd-inst-$launch_date
    ;;
    "mount")
        echo "[Mount]" >> /tmp/systemd-inst-$launch_date
        echo "# What=/dev/sdc" >> /tmp/systemd-inst-$launch_date
        echo "# What=/mnt/drive" >> /tmp/systemd-inst-$launch_date
        echo "# Type=ext4" >> /tmp/systemd-inst-$launch_date
    ;;
    "path")
        echo "[Path]" >> /tmp/systemd-inst-$launch_date
        echo "# PathExists=/target" >> /tmp/systemd-inst-$launch_date
    ;;
    "timer")
        echo "[Timer]" >> /tmp/systemd-inst-$launch_date
        echo "OnCalendar=daily" >> /tmp/systemd-inst-$launch_date
    ;;
esac

echo "" >> /tmp/systemd-inst-$launch_date

case $1 in
    "service"|"target"|"mount"|"path"|"automount")
        echo "[Install]" >> /tmp/systemd-inst-$launch_date
        echo "WantedBy=$window_type" >> /tmp/systemd-inst-$launch_date
        echo "# Uncomment lines below if your program should access third-party daemons" >> /tmp/systemd-inst-$launch_date
        echo "# RequiredBy=" >> /tmp/systemd-inst-$launch_date
    ;;
    "socket")
        echo "[Install]" >> /tmp/systemd-inst-$launch_date
        echo "WantedBy=sockets.target" >> /tmp/systemd-inst-$launch_date
    ;;
    "timer")
        echo "[Install]" >> /tmp/systemd-inst-$launch_date
        echo "WantedBy=timers.target" >> /tmp/systemd-inst-$launch_date
    ;;
esac

echo -n "Would you like edit your $target_name.$1 config file? (y/N) > "
read n
if [ "$n" == "y" -o "$n" == "Y" ]; then
    vi /tmp/systemd-inst-$launch_date
fi

if [ $# -eq 2 ]; then
    echo "Installing /etc/systemd/system/$target_name.$1..."
    sudo mv /tmp/systemd-inst-$launch_date "/etc/systemd/system/$target_name.$1"
elif [ $# -eq 3 ]; then
    echo "Installing $inst_location/$target_name.$1..."
    sudo mv /tmp/systemd-inst-$launch_date "$inst_location/$target_name.$1"
fi

if [ -r /tmp/systemd-inst-$launch_date ]; then
    echo "The $target_name.$1 installation process might failed or corrupted." >&2
    rm /tmp/systemd-inst-$launch_date
    exit 1
fi

systemctl status $target_name
echo -n "Would you like enable your $target_name.$1? (Y/n) > "
read n
if ! [ "$n" == "N" -o "$n" == "n" ]; then
    sudo systemctl enable $target_name.$1
fi

echo -n "Would you like start your $target_name.$1? (Y/n) > "
read n
if ! [ "$n" == "N" -o "$n" == "n" ]; then
    sudo systemctl start $target_name.$1
fi

